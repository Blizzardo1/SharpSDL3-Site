### YamlMime:ManagedReference
items:
- uid: SharpSDL3.Mixer.Mixer.Mix_EffectFunc_t
  commentId: T:SharpSDL3.Mixer.Mixer.Mix_EffectFunc_t
  id: Mixer.Mix_EffectFunc_t
  parent: SharpSDL3.Mixer
  children: []
  langs:
  - csharp
  - vb
  name: Mixer.Mix_EffectFunc_t
  nameWithType: Mixer.Mix_EffectFunc_t
  fullName: SharpSDL3.Mixer.Mixer.Mix_EffectFunc_t
  type: Delegate
  source:
    remote:
      path: SDL3/Mixer/Mixer.cs
      branch: main
      repo: https://github.com/Blizzardo1/SharpSDL3
    id: Mix_EffectFunc_t
    path: ../../repos/SDL3-CS/SDL3/Mixer/Mixer.cs
    startLine: 61
  assemblies:
  - SharpSDL3
  namespace: SharpSDL3.Mixer
  summary: >-
    This is the format of a special effect callback:


    myeffect(int chan, void *stream, int len, void *udata);
  remarks: >-
    (chan) is the channel number that your effect is affecting. (stream) is the

    buffer of data to work upon. (len) is the size of (stream), and (udata) is

    a user-defined bit of data, which you pass as the last arg of

    Mix_RegisterEffect(), and is passed back unmolested to your callback. Your

    effect changes the contents of (stream) based on whatever parameters are

    significant, or just leaves it be, if you prefer. You can do whatever you

    like to the buffer, though, and it will continue in its changed state down

    the mixing pipeline, through any other effect functions, then finally to be

    mixed with the rest of the channels and music for the final output stream.
  example: []
  syntax:
    content: public delegate void Mixer.Mix_EffectFunc_t(int chan, nint stream, int len, nint udata)
    parameters:
    - id: chan
      type: System.Int32
      description: The channel number that your effect is affecting.
    - id: stream
      type: System.IntPtr
      description: The buffer of data to work upon.
    - id: len
      type: System.Int32
      description: The size of (stream).
    - id: udata
      type: System.IntPtr
      description: User Data
    content.vb: Public Delegate Sub Mixer.Mix_EffectFunc_t(chan As Integer, stream As IntPtr, len As Integer, udata As IntPtr)
references:
- uid: SharpSDL3.Mixer
  commentId: N:SharpSDL3.Mixer
  href: SharpSDL3.html
  name: SharpSDL3.Mixer
  nameWithType: SharpSDL3.Mixer
  fullName: SharpSDL3.Mixer
  spec.csharp:
  - uid: SharpSDL3
    name: SharpSDL3
    href: SharpSDL3.html
  - name: .
  - uid: SharpSDL3.Mixer
    name: Mixer
    href: SharpSDL3.Mixer.html
  spec.vb:
  - uid: SharpSDL3
    name: SharpSDL3
    href: SharpSDL3.html
  - name: .
  - uid: SharpSDL3.Mixer
    name: Mixer
    href: SharpSDL3.Mixer.html
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.IntPtr
  commentId: T:System.IntPtr
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.intptr
  name: nint
  nameWithType: nint
  fullName: nint
  nameWithType.vb: IntPtr
  fullName.vb: System.IntPtr
  name.vb: IntPtr
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
